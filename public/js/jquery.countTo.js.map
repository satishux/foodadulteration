{"version":3,"sources":["jquery.countTo.js"],"names":["$","formatter","value","settings","toFixed","decimals","fn","countTo","options","this","each","updateTimer","increment","loopCount","render","onUpdate","call","self","loops","$self","removeData","clearInterval","data","interval","to","onComplete","formattedValue","text","extend","defaults","from","speed","refreshInterval","Math","ceil","setInterval","jQuery"],"mappings":"CAAA,SAAAA,GA4EA,QAAAC,GAAAC,EAAAC,GACA,MAAAD,GAAAE,QAAAD,EAAAE,UA5EAL,EAAAM,GAAAC,QAAA,SAAAC,GAGA,MAFAA,GAAAA,MAEAR,EAAAS,MAAAC,KAAA,WAgCA,QAAAC,KACAT,GAAAU,EACAC,IAEAC,EAAAZ,GAEA,kBAAAC,GAAA,UACAA,EAAAY,SAAAC,KAAAC,EAAAf,GAGAW,GAAAK,IAEAC,EAAAC,WAAA,WACAC,cAAAC,EAAAC,UACArB,EAAAC,EAAAqB,GAEA,kBAAArB,GAAA,YACAA,EAAAsB,WAAAT,KAAAC,EAAAf,IAKA,QAAAY,GAAAZ,GACA,GAAAwB,GAAAvB,EAAAF,UAAAe,KAAAC,EAAAf,EAAAC,EACAgB,GAAAQ,KAAAD,GAtDA,GAAAvB,GAAAH,EAAA4B,UAAA5B,EAAAM,GAAAC,QAAAsB,UACAC,KAAA9B,EAAAS,MAAAa,KAAA,QACAE,GAAAxB,EAAAS,MAAAa,KAAA,MACAS,MAAA/B,EAAAS,MAAAa,KAAA,SACAU,gBAAAhC,EAAAS,MAAAa,KAAA,oBACAjB,SAAAL,EAAAS,MAAAa,KAAA,aACAd,GAGAU,EAAAe,KAAAC,KAAA/B,EAAA4B,MAAA5B,EAAA6B,iBACApB,GAAAT,EAAAqB,GAAArB,EAAA2B,MAAAZ,EAGAD,EAAAR,KACAU,EAAAnB,EAAAS,MACAI,EAAA,EACAX,EAAAC,EAAA2B,KACAR,EAAAH,EAAAG,KAAA,cAEAH,GAAAG,KAAA,UAAAA,GAGAA,EAAAC,UACAF,cAAAC,EAAAC,UAEAD,EAAAC,SAAAY,YAAAxB,EAAAR,EAAA6B,iBAGAlB,EAAAZ,MA+BAF,EAAAM,GAAAC,QAAAsB,UACAC,KAAA,EACAN,GAAA,EACAO,MAAA,IACAC,gBAAA,IACA3B,SAAA,EACAJ,UAAAA,EACAc,SAAA,KACAU,WAAA,OAMAW","file":"jquery.countTo.js","sourcesContent":["(function ($) {\n\t$.fn.countTo = function (options) {\n\t\toptions = options || {};\n\n\t\treturn $(this).each(function () {\n\t\t\t// set options for current element\n\t\t\tvar settings = $.extend({}, $.fn.countTo.defaults, {\n\t\t\t\tfrom:            $(this).data('from'),\n\t\t\t\tto:              $(this).data('to'),\n\t\t\t\tspeed:           $(this).data('speed'),\n\t\t\t\trefreshInterval: $(this).data('refresh-interval'),\n\t\t\t\tdecimals:        $(this).data('decimals')\n\t\t\t}, options);\n\n\t\t\t// how many times to update the value, and how much to increment the value on each update\n\t\t\tvar loops = Math.ceil(settings.speed / settings.refreshInterval),\n\t\t\t\tincrement = (settings.to - settings.from) / loops;\n\n\t\t\t// references & variables that will change with each update\n\t\t\tvar self = this,\n\t\t\t\t$self = $(this),\n\t\t\t\tloopCount = 0,\n\t\t\t\tvalue = settings.from,\n\t\t\t\tdata = $self.data('countTo') || {};\n\n\t\t\t$self.data('countTo', data);\n\n\t\t\t// if an existing interval can be found, clear it first\n\t\t\tif (data.interval) {\n\t\t\t\tclearInterval(data.interval);\n\t\t\t}\n\t\t\tdata.interval = setInterval(updateTimer, settings.refreshInterval);\n\n\t\t\t// initialize the element with the starting value\n\t\t\trender(value);\n\n\t\t\tfunction updateTimer() {\n\t\t\t\tvalue += increment;\n\t\t\t\tloopCount++;\n\n\t\t\t\trender(value);\n\n\t\t\t\tif (typeof(settings.onUpdate) == 'function') {\n\t\t\t\t\tsettings.onUpdate.call(self, value);\n\t\t\t\t}\n\n\t\t\t\tif (loopCount >= loops) {\n\t\t\t\t\t// remove the interval\n\t\t\t\t\t$self.removeData('countTo');\n\t\t\t\t\tclearInterval(data.interval);\n\t\t\t\t\tvalue = settings.to;\n\n\t\t\t\t\tif (typeof(settings.onComplete) == 'function') {\n\t\t\t\t\t\tsettings.onComplete.call(self, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction render(value) {\n\t\t\t\tvar formattedValue = settings.formatter.call(self, value, settings);\n\t\t\t\t$self.text(formattedValue);\n\t\t\t}\n\t\t});\n\t};\n\n\t$.fn.countTo.defaults = {\n\t\tfrom: 0,               // the number the element should start at\n\t\tto: 0,                 // the number the element should end at\n\t\tspeed: 1000,           // how long it should take to count between the target numbers\n\t\trefreshInterval: 100,  // how often the element should be updated\n\t\tdecimals: 0,           // the number of decimal places to show\n\t\tformatter: formatter,  // handler for formatting the value before rendering\n\t\tonUpdate: null,        // callback method for every time the element is updated\n\t\tonComplete: null       // callback method for when the element finishes updating\n\t};\n\n\tfunction formatter(value, settings) {\n\t\treturn value.toFixed(settings.decimals);\n\t}\n}(jQuery));\n"],"sourceRoot":"/source/"}